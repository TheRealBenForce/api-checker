AWSTemplateFormatVersion: '2010-09-09'
Conditions:
  MakeMetric: !Not
    - !Equals
      - !Ref 'CloudwatchMetricName'
      - ''
Description: Monitors a key in an api call for a value and prints to cloudwatch logs
Parameters:
  CloudwatchMetricName:
    Default: ''
    Description: Fill this out if you want a true/false binary metric transformation
      to be created on your logs
    Type: String
  key:
    Default: open
    Description: Key youd like to get a value for.
    Type: String
  url:
    Default: https://members.heatsynclabs.org/space_api.json
    Description: Url for the api you are checking
    Type: String
Resources:
  Function:
    DependsOn: LogGroup
    Properties:
      Code:
        ZipFile: !Join
          - "\n"
          - - import boto3, os, json
            - from botocore.vendored import requests
            - ''
            - 'def handler(event, context):'
            - '    try:'
            - '        r = requests.get(event["url"])'
            - '        print(r.json()[event["key"]])'
            - '        if "namespace" in os.environ:'
            - '            cw = boto3.client("cloudwatch")'
            - '            j = json.loads(os.environ["json"])'
            - '            j["metrics"][0].insert(0, os.environ["metric_name"])'
            - '            j["metrics"][0].insert(0, os.environ["namespace"])'
            - '            j["title"] = os.environ["namespace"]'
            - '            response = cw.get_metric_widget_image(MetricWidget=json.dumps(j))'
            - '    except Exception as e:'
            - '        print(str(e))'
            - '    return'
      Environment:
        Variables: !If
          - MakeMetric
          - metric_name: !Ref 'key'
            namespace: !Ref 'CloudwatchMetricName'
          - !Ref 'AWS::NoValue'
      FunctionName: !Ref 'AWS::StackName'
      Handler: index.handler
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Runtime: python3.7
      Timeout: '10'
    Type: AWS::Lambda::Function
  LambdaExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Type: AWS::IAM::Role
  LogGroup:
    Properties:
      LogGroupName: !Join
        - ''
        - - /aws/lambda/
          - !Ref 'AWS::StackName'
    Type: AWS::Logs::LogGroup
  MetricFilterFalse:
    Condition: MakeMetric
    DependsOn: LogGroup
    Properties:
      FilterPattern: ?False ?false ?FALSE
      LogGroupName: !Join
        - ''
        - - /aws/lambda/
          - !Ref 'AWS::StackName'
      MetricTransformations:
        - MetricName: !Ref 'key'
          MetricNamespace: !Ref 'CloudwatchMetricName'
          MetricValue: '0'
    Type: AWS::Logs::MetricFilter
  MetricFilterTrue:
    Condition: MakeMetric
    DependsOn: LogGroup
    Properties:
      FilterPattern: ?True ?true ?TRUE
      LogGroupName: !Join
        - ''
        - - /aws/lambda/
          - !Ref 'Function'
      MetricTransformations:
        - MetricName: !Ref 'key'
          MetricNamespace: !Ref 'CloudwatchMetricName'
          MetricValue: '1'
    Type: AWS::Logs::MetricFilter
  Permission:
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !Ref 'Function'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt 'Rule.Arn'
    Type: AWS::Lambda::Permission
  Rule:
    Properties:
      Description: Checks api key value once per minute
      ScheduleExpression: rate(1 minute)
      State: ENABLED
      Targets:
        - Arn: !GetAtt 'Function.Arn'
          Id: WebsiteCheck
          Input: !Join
            - ''
            - - '{'
              - '"url": "'
              - !Ref 'url'
              - '","key": "'
              - !Ref 'key'
              - '"}'
    Type: AWS::Events::Rule
